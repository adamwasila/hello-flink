plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
}

group = "org.wasila.flink"
version = '0.1'

mainClassName = "org.wasila.flink.StreamingJob"

repositories {
    jcenter()
}

dependencies {
    compile 'org.apache.flink:flink-java:1.4.0'
    compile 'org.apache.flink:flink-streaming-java_2.11:1.4.0'
    compile 'org.apache.flink:flink-clients_2.11:1.4.0'
}

shadowJar {

    exclude 'org/apache/flink/shaded/com/**'
    exclude 'web-docs/**'
    exclude 'assets/**'
    
    dependencies {
        // This list contains all dependencies of flink-dist Everything else will be packaged into the fat-jar
        exclude(dependency('org.apache.flink:flink-annotations'))
        exclude(dependency('org.apache.flink:flink-shaded-hadoop1'))
        exclude(dependency('org.apache.flink:flink-shaded-hadoop2'))
        exclude(dependency('org.apache.flink:flink-shaded-curator-recipes'))
        exclude(dependency('org.apache.flink:flink-core'))
        exclude(dependency('org.apache.flink:flink-java'))
        exclude(dependency('org.apache.flink:flink-scala_2.10'))
        exclude(dependency('org.apache.flink:flink-runtime_2.10'))
        exclude(dependency('org.apache.flink:flink-optimizer_2.10'))
        exclude(dependency('org.apache.flink:flink-clients_2.10'))
        exclude(dependency('org.apache.flink:flink-avro_2.10'))
        exclude(dependency('org.apache.flink:flink-examples-batch_2.10'))
        exclude(dependency('org.apache.flink:flink-examples-streaming_2.10'))
        exclude(dependency('org.apache.flink:flink-streaming-java_2.10'))

        // Also exclude very big transitive dependencies of Flink
        //   WARNING: You have to remove these excludes if your code relies on other versions of these dependencies.

        exclude(dependency('org.clapper:grizzled-slf4j_2.10:'))
        exclude(dependency('org.mortbay.jetty::'))
        exclude(dependency('jline:jline:'))
        exclude(dependency('org.javassist:javassist:'))
        
        exclude(dependency('org.scala-lang:scala-library'))
        exclude(dependency('org.scala-lang:scala-compiler'))
        exclude(dependency('org.scala-lang:scala-reflect'))
        exclude(dependency('com.amazonaws:aws-java-sdk'))
        exclude(dependency('com.typesafe.akka::'))
        exclude(dependency('io.netty:netty-all'))
        exclude(dependency('io.netty:netty'))
        exclude(dependency('commons-fileupload:commons-fileupload'))
        exclude(dependency('org.apache.avro:avro'))
        exclude(dependency('commons-collections:commons-collections'))
        exclude(dependency('org.codehaus.jackson:jackson-core-asl'))
        exclude(dependency('org.codehaus.jackson:jackson-mapper-asl'))
        exclude(dependency('com.thoughtworks.paranamer:paranamer'))
        exclude(dependency('org.xerial.snappy:snappy-java'))
        exclude(dependency('org.apache.commons:commons-compress'))
        exclude(dependency('org.tukaani:xz'))
        exclude(dependency('com.esotericsoftware.kryo:kryo'))
        exclude(dependency('com.esotericsoftware.minlog:minlog'))
        exclude(dependency('org.objenesis:objenesis'))
        exclude(dependency('com.twitter::'))
        exclude(dependency('commons-lang:commons-lang'))
        exclude(dependency('junit:junit'))
        exclude(dependency('de.javakaffee:kryo-serializers'))
        exclude(dependency('joda-time:joda-time'))
        exclude(dependency('org.apache.commons:commons-lang3'))
        exclude(dependency('org.slf4j:slf4j-api'))
        exclude(dependency('org.slf4j:slf4j-log4j12'))
        exclude(dependency('log4j:log4j'))
        exclude(dependency('org.apache.commons:commons-math'))
        exclude(dependency('org.apache.sling:org.apache.sling.commons.json'))
        exclude(dependency('commons-logging:commons-logging'))
        exclude(dependency('commons-codec:commons-codec'))
        exclude(dependency('com.fasterxml.jackson.core:jackson-core'))
        exclude(dependency('com.fasterxml.jackson.core:jackson-databind'))
        exclude(dependency('com.fasterxml.jackson.core:jackson-annotations'))
        exclude(dependency('stax:stax-api'))
        exclude(dependency('com.typesafe:config'))
        exclude(dependency('org.uncommons.maths:uncommons-maths'))
        exclude(dependency('com.github.scopt::'))
        exclude(dependency('commons-io:commons-io'))
        exclude(dependency('commons-cli:commons-cli'))
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}
